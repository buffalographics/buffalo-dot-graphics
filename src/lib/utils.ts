import { Cloudinary } from '@cloudinary/url-gen'
import { v2 as cloudinary } from 'cloudinary'
import _ from 'lodash'

cloudinary.config({
  cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_SECRET,
  secure: true,
})

export interface EdBy {
  accessKey: string
  customid: string
  externalid: string
}
type SCParams = {
  expression: string
  sortBy?: string
}

export const loadGallerySection = async ({ expression, max }: any) => {
  const assets = await cloudinary.search
    .expression(expression)
    .sort_by('filename', 'desc')
    .max_results(max)

    .execute()
    .catch((err) => {
      console.error(err)
      return err
    })

  return assets as CloudinarySearch
}

export const galleryPageImages = async () => {
  const asssets = await cloudinary.search
    .expression('tags = mixer')
    .sort_by('filename', 'asc')
    .max_results(10)

    .execute()
    .catch((err) => {
      console.error(err)
      return err
    })

  console.log('asssets: ', asssets)
  return asssets
}

export const searchCloudinery = async ({ expression }: SCParams) => {
  // return await cloudinary.api.resources_by_asset_folder('buffalo-graphics')
  const asssets = await cloudinary.search
    .expression(expression)
    .sort_by('filename', 'asc')
    .max_results(1)
    .execute()
    .catch((err) => console.error(err))

  return asssets as CloudinarySearch
}

export const loadImages = async (
  dir: string = '*',
  max?: number | undefined,
) => {
  // return await cloudinary.api.resources_by_asset_folder('buffalo-graphics')
  const asssets = (await cloudinary.search
    .expression(
      `folder:buffalo-graphics-img/${dir}`, // add your folderÃ¥
    )
    .sort_by('public_id', 'desc')
    .max_results(max)
    .execute()
    .catch((err) => console.error(err))) as Promise<CloudinarySearch>

  return asssets
}

// Demo: https://res.cloudinary.com/demo/image/upload/w_300,c_limit,q_auto/turtles.jpg

// Generated by https://quicktype.io

export interface CloudinarySearch {
  total_count: number
  time: number
  next_cursor: string
  resources: Resource[]
  rate_limit_allowed: number
  rate_limit_reset_at: string
  rate_limit_remaining: number
}

export interface Resource {
  asset_id: string
  public_id: string
  folder: string
  filename: string
  format: string
  version: number
  resource_type: string
  type: string
  created_at: string
  uploaded_at: string
  bytes: number
  backup_bytes: number
  width: number
  height: number
  aspect_ratio: number
  pixels: number
  pages: number
  url: string
  secure_url: string
  status: string
  access_mode: string
  access_control: null
  etag: string
  created_by: EdBy
  uploaded_by: EdBy
  last_updated: LastUpdated
}

export interface EdBy {
  access_key: string
  custom_id: string
  external_id: string
}

export interface LastUpdated {
  tags_updated_at: string
  updated_at: string
  public_id_updated_at?: string
}
